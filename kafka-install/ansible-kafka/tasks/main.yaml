---
- name: Load OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - ../vars/{{ ansible_os_family }}.yml
    - ../vars/{{ ansible_distribution_release }}.yml
    - ../vars/empty.yml
  tags:
    - always

- name: Create kafka group
  group:
    name: '{{ kafka_group }}'
    state: present
    gid: '{{ kafka_gorup_id }}'
  when: kafka_create_user_group | bool
  tags:
    - kafka_group

- name: Create kafka user
  user:
    name: '{{ kafka_user }}'
    group: '{{ kafka_group }}'
    state: present
    uid: '{{ kafka_user_id }}'
    createhome: no
    shell: /sbin/nologin
  when: kafka_create_user_group | bool
  tags:
    - kafka_user

- name: Download Apache Kafka
  get_url:
    url: "{{ kafka_download_base_url }}/kafka_{{ kafka_scala_version }}-{{ kafka_version }}.tgz"
    dest: /tmp
  tags:
    - kafka_download

- name: Unpack Apache Kafka
  unarchive:
    src: /tmp/kafka_{{ kafka_scala_version }}-{{ kafka_version }}.tgz
    dest: '{{ kafka_root_dir }}'
    copy: no
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
  tags:
    - kafka_unpack

- name: Create symlink to kafka installation directory
  file:
    src: '{{ kafka_root_dir }}/kafka_{{ kafka_scala_version }}-{{ kafka_version }}'
    dest: '{{ kafka_dir }}'
    state: link
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
  tags:
    - kafka_dirs

- name: Create directory for kafka data log files
  file:
    path: '{{ kafka_data_log_dirs }}'
    state: directory
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
    mode: 0755
  tags:
    - kafka_dirs

- name: Create directory for kafka application logs
  file:
    path: '{{ kafka_log_dir }}'
    state: directory
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
    mode: 0755
  tags:
    - kafka_dirs

- name: Register '{{ kafka_dir }}/logs' directory status
  stat:
    path: '{{ kafka_dir }}/logs'
  register: application_logs_dir
  tags:
    - kafka_dirs

- name: Create symlink to application log directory
  file:
    src: '{{ kafka_log_dir }}'
    dest: '{{ kafka_dir }}/logs'
    state: link
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
    mode: 0755
    follow: no
  when: not application_logs_dir.stat.exists
  tags:
    - kafka_dirs

- name: Template configuration file to server.properties
  template:
    src: server.properties.j2
    dest: '{{ kafka_dir }}/config/server.properties'
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
    mode: 0644
  notify:
    - Restart kafka service
  tags:
    - kafka_config

# - name: Template configuration file to zookeeper.properties
#   template:
#     src: zookeeper.properties.j2
#     dest: '{{ kafka_dir }}/config/zookeeper.properties'
#     group: '{{ kafka_group }}'
#     owner: '{{ kafka_user }}'
#     mode: 0644
#   tags:
#     - kafka_config

- name: Template Kafka init.d service file
  template:
    src: kafka.initd.j2
    dest: /etc/init.d/kafka
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
    mode: 0644
  notify:
    - Reload initd
    - Restart kafka service
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == '6'
  tags:
    - kafka_service

- name: Template kafka systemd service
  template:
    src: kafka.service.j2
    dest: "{{ kafka_unit_path }}"
    group: '{{ kafka_group }}'
    owner: '{{ kafka_user }}'
    mode: 0644
  notify:
    - Restart kafka systemd
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version > '6' or ansible_os_family == "Debian"
  tags:
    - kafka_service

- name: Install and start the kafka service
  service:
    name: kafka
    state: restarted
    enabled: yes
  when: kafka_start
  tags:
    - kafka_service

- name: Delete the kafka archive file
  file:
    path: /tmp/kafka_{{ kafka_scala_version }}-{{ kafka_version }}.tgz
    state: absent
  tags:
    - kafka_cleanup
